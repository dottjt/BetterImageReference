var _user$project$Update$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'ChangeSearchInput':
				var _p1 = _p0._0;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{searchInput: _p1}),
					{
						ctor: '::',
						_0: _user$project$Command$fetchSearchQuery(_p1),
						_1: {ctor: '[]'}
					});
			case 'SelectIntervalTiming':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{radioInterval: _p0._0}),
					{ctor: '[]'});
			case 'SelectUpsideDown':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{radioUpsideDown: _p0._0}),
					{ctor: '[]'});
			case 'ChangeStatus':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{applicationStatus: _p0._0}),
					{ctor: '[]'});
			case 'ChangePopupStatus':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{popupStatus: _p0._0}),
					{ctor: '[]'});
			case 'InitialFetchQuerySuccess':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{searchedCollections: _p0._0}),
					{ctor: '[]'});
			case 'InitialFetchQueryFail':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							error: _elm_lang$core$Basics$toString(_p0._0)
						}),
					{ctor: '[]'});
			case 'FetchCollectionListSuccess':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{searchedCollections: _p0._0}),
					{ctor: '[]'});
			case 'FetchCollectionListFail':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							error: _elm_lang$core$Basics$toString(_p0._0)
						}),
					{ctor: '[]'});
			case 'FetchCollectionStartAppSuccess':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{loadedCollectionsWithImages: _p0._0}),
					{ctor: '[]'});
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							error: _elm_lang$core$Basics$toString(_p0._0)
						}),
					{ctor: '[]'});
		}
	});
