var _user$project$Update$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'ChangeSearchInput':
				var _p1 = _p0._0;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{searchInput: _p1}),
					{
						ctor: '::',
						_0: _user$project$Command$fetchSearchQuery(_p1),
						_1: {ctor: '[]'}
					});
			case 'SelectIntervalTimingType':
				var _p3 = _p0._0;
				var _p2 = _p3;
				if (_p2.ctor === 'Minute') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{radioIntervalType: _p3, radioIntervalTiming: _user$project$Model$M1}),
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{radioIntervalType: _p3, radioIntervalTiming: _user$project$Model$S30}),
						{ctor: '[]'});
				}
			case 'SelectIntervalTiming':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{radioIntervalTiming: _p0._0}),
					{ctor: '[]'});
			case 'UpdateCustomIntervalInput':
				var _p4 = _elm_lang$core$String$toInt(_p0._0);
				if (_p4.ctor === 'Ok') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{radioIntervalCustomInput: _p4._0}),
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{error: _p4._0}),
						{ctor: '[]'});
				}
			case 'SelectCollection':
				var _p6 = _p0._0;
				var _p5 = _p0._1;
				if (_p5.ctor === 'AddSelectedCollection') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								selectedCollections: {ctor: '::', _0: _p6, _1: model.selectedCollections}
							}),
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								selectedCollections: A2(
									_elm_lang$core$List$filter,
									function (x) {
										return !_elm_lang$core$Native_Utils.eq(x.id, _p6.id);
									},
									model.selectedCollections)
							}),
						{ctor: '[]'});
				}
			case 'SelectUpsideDown':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{radioUpsideDown: _p0._0}),
					{ctor: '[]'});
			case 'ChangeStatus':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{applicationStatus: _p0._0}),
					{
						ctor: '::',
						_0: _user$project$Command$startAppFetchImages(model.selectedCollections),
						_1: {ctor: '[]'}
					});
			case 'ChangePopupStatus':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{popupStatus: _p0._0}),
					{ctor: '[]'});
			case 'ChangeDrawStatus':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{imageStatus: _p0._0}),
					{ctor: '[]'});
			case 'Tick':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{imageTime: _p0._0}),
					{ctor: '[]'});
			case 'ImageTimerBarProgress':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
			case 'InitialFetchQuerySuccess':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{searchedCollections: _p0._0}),
					{ctor: '[]'});
			case 'InitialFetchQueryFail':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							error: _elm_lang$core$Basics$toString(_p0._0)
						}),
					{ctor: '[]'});
			case 'FetchCollectionListSuccess':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{searchedCollections: _p0._0}),
					{ctor: '[]'});
			case 'FetchCollectionListFail':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							error: _elm_lang$core$Basics$toString(_p0._0)
						}),
					{ctor: '[]'});
			case 'FetchCollectionStartAppSuccess':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{loadedCollectionImagesList: _p0._0}),
					{ctor: '[]'});
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							error: _elm_lang$core$Basics$toString(_p0._0)
						}),
					{ctor: '[]'});
		}
	});
