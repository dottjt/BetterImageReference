var _user$project$Update$calculateIntervalTiming = function (model) {
	var customTime = model.radioIntervalCustomInput;
	var imageTime = model.imageTime;
	var _p0 = model.radioIntervalTiming;
	switch (_p0.ctor) {
		case 'S30':
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{imageTime: 30}),
				{ctor: '[]'});
		case 'S45':
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{imageTime: 45}),
				{ctor: '[]'});
		case 'S60':
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{imageTime: 60}),
				{ctor: '[]'});
		case 'S90':
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{imageTime: 90}),
				{ctor: '[]'});
		case 'S120':
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{imageTime: 120}),
				{ctor: '[]'});
		case 'M1':
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{imageTime: 60}),
				{ctor: '[]'});
		case 'M2':
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{imageTime: 120}),
				{ctor: '[]'});
		case 'M3':
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{imageTime: 180}),
				{ctor: '[]'});
		case 'M4':
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{imageTime: 240}),
				{ctor: '[]'});
		case 'M5':
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{imageTime: 300}),
				{ctor: '[]'});
		case 'M10':
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{imageTime: 600}),
				{ctor: '[]'});
		default:
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{imageTime: customTime}),
				{ctor: '[]'});
	}
};
var _user$project$Update$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'ChangeSearchInput':
				var _p2 = _p1._0;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{searchInput: _p2}),
					{
						ctor: '::',
						_0: _user$project$Command$fetchSearchQuery(_p2),
						_1: {ctor: '[]'}
					});
			case 'SelectCollection':
				var _p4 = _p1._0;
				var _p3 = _p1._1;
				if (_p3.ctor === 'AddSelectedCollection') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								selectedCollections: {ctor: '::', _0: _p4, _1: model.selectedCollections}
							}),
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								selectedCollections: A2(
									_elm_lang$core$List$filter,
									function (x) {
										return !_elm_lang$core$Native_Utils.eq(x.id, _p4.id);
									},
									model.selectedCollections)
							}),
						{ctor: '[]'});
				}
			case 'SelectIntervalTimingType':
				var _p6 = _p1._0;
				var _p5 = _p6;
				if (_p5.ctor === 'Minute') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{radioIntervalType: _p6, radioIntervalTiming: _user$project$Model$M1, radioIntervalCustomInput: 0}),
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{radioIntervalType: _p6, radioIntervalTiming: _user$project$Model$S30, radioIntervalCustomInput: 0}),
						{ctor: '[]'});
				}
			case 'SelectIntervalTiming':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{radioIntervalTiming: _p1._0}),
					{ctor: '[]'});
			case 'UpdateCustomIntervalInput':
				var _p10 = _p1._0;
				var _p7 = model.radioIntervalType;
				if (_p7.ctor === 'Second') {
					var _p8 = _elm_lang$core$String$toInt(_p10);
					if (_p8.ctor === 'Ok') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{radioIntervalCustomInput: _p8._0}),
							{ctor: '[]'});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{error: _p8._0}),
							{ctor: '[]'});
					}
				} else {
					var _p9 = _elm_lang$core$String$toInt(_p10);
					if (_p9.ctor === 'Ok') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{radioIntervalCustomInput: _p9._0 * 60}),
							{ctor: '[]'});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{error: _p9._0}),
							{ctor: '[]'});
					}
				}
			case 'SelectUpsideDown':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{radioUpsideDown: _p1._0}),
					{ctor: '[]'});
			case 'ChangeStatus':
				var _p12 = _p1._0;
				var _p11 = _p12;
				switch (_p11.ctor) {
					case 'Start':
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{applicationStatus: _p12}),
							{
								ctor: '::',
								_0: _user$project$Command$startAppFetchImages(model.selectedCollections),
								_1: {ctor: '[]'}
							});
					case 'Finish':
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{applicationStatus: _p12}),
							{ctor: '[]'});
					default:
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{applicationStatus: _p12}),
							{ctor: '[]'});
				}
			case 'ChangePopupStatus':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{popupStatus: _p1._0}),
					{ctor: '[]'});
			case 'ChangeDrawStatus':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{imageStatus: _p1._0}),
					{ctor: '[]'});
			case 'Tick':
				return _elm_lang$core$Native_Utils.eq(model.imageTime, 0) ? A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{imageTime: model.imageTime - 1}),
					{ctor: '[]'}) : _user$project$Update$calculateIntervalTiming(model);
			case 'InitialFetchQuerySuccess':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{searchedCollections: _p1._0}),
					{ctor: '[]'});
			case 'InitialFetchQueryFail':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							error: _elm_lang$core$Basics$toString(_p1._0)
						}),
					{ctor: '[]'});
			case 'FetchCollectionListSuccess':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{searchedCollections: _p1._0}),
					{ctor: '[]'});
			case 'FetchCollectionListFail':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							error: _elm_lang$core$Basics$toString(_p1._0)
						}),
					{ctor: '[]'});
			case 'FetchImageStartAppSuccess':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{loadedImageAssocList: _p1._0}),
					{ctor: '[]'});
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							error: _elm_lang$core$Basics$toString(_p1._0)
						}),
					{ctor: '[]'});
		}
	});
